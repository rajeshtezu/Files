# Making queries :
------------------

Throughout this guide (and in the reference), we’ll refer to the following models :

    from django.db import models

    class Blog(models.Model):
        name = models.CharField(max_length=100)
        tagline = models.TextField()

        def __str__(self):              # __unicode__ on Python 2
            return self.name

    class Author(models.Model):
        name = models.CharField(max_length=200)
        email = models.EmailField()

        def __str__(self):              # __unicode__ on Python 2
            return self.name

    class Entry(models.Model):
        blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
        headline = models.CharField(max_length=255)
        body_text = models.TextField()
        pub_date = models.DateField()
        mod_date = models.DateField()
        authors = models.ManyToManyField(Author)
        n_comments = models.IntegerField()
        n_pingbacks = models.IntegerField()
        rating = models.IntegerField()

        def __str__(self):              # __unicode__ on Python 2
            return self.headline


# Creating objects :
--------------------
-> A model class represents a database table, and an instance of that class represents a particular record in the
   database table.

-> To create an object, instantiate it using keyword arguments to the model class, then call save() to save it to
   the database.

   Eg:
   >>> from blog.models import Blog
   >>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
   >>> b.save()

   Note:
   1. This performs an INSERT SQL statement behind the scenes. Django doesn’t hit the database until you explicitly call save().
   2. To create and save an object in a single step, use the create() method.


-> To create an object having ManyToManyField :

  Eg:
  >>> from blog.models import Blog, Author, Entry
  >>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
  >>> author = Author.objects.create(name="Rajesh", email="rajesh@gmail.com")
  >>> entry = Entry.objects.create(blog=b)
  >>> entry.authors.add(author)  # ManyToManyField


# Saving changes to objects :
-----------------------------
-> To save changes to an object that’s already in the database, use save().

   Eg:
   >>> b5.name = 'New name'
   >>> b5.save()

   Note: This performs an UPDATE SQL statement behind the scenes. Django doesn’t hit the database until you explicitly call save().


# Saving ForeignKey and ManyToManyField fields :
------------------------------------------------
-> Updating a ForeignKey field works exactly the same way as saving a normal field.

   Eg:
   >>> from blog.models import Blog, Entry
   >>> entry = Entry.objects.get(pk=1)
   >>> cheese_blog = Blog.objects.get(name="Cheddar Talk")
   >>> entry.blog = cheese_blog
   >>> entry.save()

-> Updating a ManyToManyField works a little differently – use the add() method on the field to add a record to the
   relation. But if ManyToManyField is created with "through" we can't use add(), instead we need to create object of
   intermediate model.

   Eg:
   >>> from blog.models import Author
   >>> joe = Author.objects.create(name="Joe")
   >>> entry.authors.add(joe)

-> To add multiple records to a ManyToManyField in one go, include multiple arguments in the call to add().

   Eg:
   >>> john = Author.objects.create(name="John")
   >>> paul = Author.objects.create(name="Paul")
   >>> george = Author.objects.create(name="George")
   >>> ringo = Author.objects.create(name="Ringo")
   >>> entry.authors.add(john, paul, george, ringo)


# Retrieving objects :
----------------------
-> To retrieve objects from your database, construct a QuerySet via a Manager on your model class.
-> A QuerySet represents a collection of objects from your database. It can have zero, one or many filters.
   A QuerySet equates to a SELECT statement, and a filter is a limiting clause such as WHERE or LIMIT.
-> You get a QuerySet by using your model’s Manager. Each model has at least one Manager, and it’s called
   objects by default.

   Note : Managers are accessible only via model classes, rather than from model instances, to enforce a
          separation between “table-level” operations and “record-level” operations.

  Eg:
  >>> Blog.objects
  <django.db.models.manager.Manager object at ...>
  >>> b = Blog(name='Foo', tagline='Bar')
  >>> b.objects
  Traceback:
      ...
  AttributeError: "Manager isn't accessible via Blog instances."


# Retrieving all objects :
--------------------------
  Eg:
  >>> all_entries = Entry.objects.all()


# Retrieving specific objects with filters :
--------------------------------------------
-> filter(**kwargs)  : Returns a new QuerySet containing objects that match the given lookup parameters.
-> exclude(**kwargs) : Returns a new QuerySet containing objects that do not match the given lookup parameters.

  Eg:
  Entry.objects.filter(pub_date__year=2006)

  * With the default manager class, it is the same as:

  Entry.objects.all().filter(pub_date__year=2006)


  ## Chaining filters :
  --------------------
  -> The result of refining a QuerySet is itself a QuerySet, so it’s possible to chain refinements together.

     Eg:
     >>> Entry.objects.filter(
     ...     headline__startswith='What'
     ... ).exclude(
     ...     pub_date__gte=datetime.date.today()
     ... ).filter(
     ...     pub_date__gte=datetime.date(2005, 1, 30)
     ... )


  ## Filtered QuerySets are unique :
  ----------------------------------
  Eg:
  >>> q1 = Entry.objects.filter(headline__startswith="What")
  >>> q2 = q1.exclude(pub_date__gte=datetime.date.today())
  >>> q3 = q1.filter(pub_date__gte=datetime.date.today())

  -> We can use above three QuerySets separately.


  ## QuerySets are lazy :
  -----------------------
  -> The act of creating a QuerySet doesn’t involve any database activity.
  -> You can stack filters together all day long, and Django won’t actually run the query until the QuerySet is evaluated.

     Eg:
     >>> q = Entry.objects.filter(headline__startswith="What")
     >>> q = q.filter(pub_date__lte=datetime.date.today())
     >>> q = q.exclude(body_text__icontains="food")
     >>> print(q)       # Only this line will make query to hit database


# Retrieving a single object with get() :
-----------------------------------------
-> filter() will always give you a QuerySet, even if only a single object matches the query - in this case, it will
   be a QuerySet containing a single element.

-> If you know there is only one object that matches your query, you can use the get() method on a Manager which
   returns the object directly.

   Eg:
   >>> one_entry = Entry.objects.get(pk=1)

-> You can use any query expression with get(), just like with filter().

   Note : If there are no results that match the query, get() will raise a DoesNotExist exception. ie; Entry.DoesNotExist
          If more than one item matches the get() query, it will raise MultipleObjectsReturned.


# Other QuerySet methods :
--------------------------
[https://docs.djangoproject.com/en/1.11/ref/models/querysets/#queryset-api]


# Limiting QuerySets :
----------------------
-> Use a subset of Python’s array-slicing syntax to limit your QuerySet to a certain number of results. This is the
   equivalent of SQL’s LIMIT and OFFSET clauses.

   Eg-1:
   >>> Entry.objects.all()[:5]

   Eg-2:
   >>> Entry.objects.all()[5:10]

   Note: Negative indexing (i.e. Entry.objects.all()[-1]) is not supported.

-> Generally, slicing a QuerySet returns a new QuerySet – it doesn’t evaluate the query. An exception is if you use
   the “step” parameter of Python slice syntax.

   Eg: this would actually execute the query in order to return a list of every second object of the first 10
   >>> Entry.objects.all()[:10:2]


# Field lookups :
-----------------
-> Field lookups are how you specify the meat of an SQL WHERE clause.
-> Basic lookups keyword arguments take the form field__lookuptype=value.

   Eg:
   >>> Entry.objects.filter(pub_date__lte='2006-01-01')

-> The field specified in a lookup has to be the name of a model field. There’s one exception though, in case of a
   ForeignKey you can specify the field name suffixed with _id. In this case, the value parameter is expected to
   contain the raw value of the foreign model’s primary key.

   Eg:
   >>> Entry.objects.filter(blog_id=4)


   ## some of the more common lookups :
   ------------------------------------
   1. exact : An “exact” match.

      Eg:
      >>> Entry.objects.get(headline__exact="Cat bites dog")

      Note: Default lookup is "exact". ie; [headline="Cat bites dog"] is equivalent to [headline__exact="Cat bites dog"]

   2. iexact : A case-insensitive match.

      Eg:
      >>> Blog.objects.get(name__iexact="beatles blog")

   3. contains : Case-sensitive containment test.

      Eg:
      >>> Entry.objects.get(headline__contains='Lennon')

   4. icontains : Case-sensitive containment test.
   5. startswith, istartswith, endswith, iendswith.

   Complete lookup field list : [https://docs.djangoproject.com/en/1.11/ref/models/querysets/#field-lookups]


# Lookups that span relationships :
-----------------------------------













---------------------------------------------------------The End-------------------------------------------------
