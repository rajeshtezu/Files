### Models :
------------
(https://docs.djangoproject.com/en/1.11/topics/db/models/)

-> Each model is a Python class that subclasses django.db.models.Model.
-> Each attribute of the model represents a database field.
-> Django gives an automatically-generated database-access API.

  Eg:
  from django.db import models

  class Person(models.Model):
      first_name = models.CharField(max_length=30)
      last_name = models.CharField(max_length=30)


# Using models:
----------------
-> add the name of the module that contains your models.py.
INSTALLED_APPS = [
    #...
    'myapp',
    #...
]

  Run : manage.py makemigrations
        manage.py migrate


# Fields:
---------
Eg:
from django.db import models

class Musician(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    instrument = models.CharField(max_length=100)

class Album(models.Model):
    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    release_date = models.DateField()
    num_stars = models.IntegerField()

-> Field types tell about : kind of data for database, default html widgets, form validation,
Note: Be careful not to choose field names that conflict with the models API like clean, save, or delete.


# Field options:
----------------
A subset of common arguments available to all field types (All are optional):
 1. null  : If True, Django will store empty values as NULL in the database. Default is False.
 2. blank : If True, the field is allowed to be blank. Default is False.

    Note: blank is different than null. null is purely database-related, whereas blank is validation-related.

 3. choices : default form widget will be a select box instead of the standard text field and will limit choices
              to the choices given.

              Eg:
              class Person(models.Model):
              SHIRT_SIZES = (
              ('S', 'Small'),
              ('M', 'Medium'),
              ('L', 'Large'),
              )
              name = models.CharField(max_length=60)
              shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)


              >>> p = Person(name="Fred Flintstone", shirt_size="L")
              >>> p.save()
              >>> p.shirt_size
              'L'
              >>> p.get_shirt_size_display()
              'Large'

 4. default : The default value for the field. This can be a value or a callable object.
              If callable it will be called every time a new object is created.

 5. help_text : Extra “help” text to be displayed with the form widget. It’s useful for documentation
                even if your field isn’t used on a form.

 6. primary_key : If True, this field is the primary key for the model.

    Note : The primary key field is read-only. If you change the value of the primary key on an existing object and
           then save it, a new object will be created alongside the old one.

           Eg:
           class Fruit(models.Model):
             name = models.CharField(max_length=100, primary_key=True)

           >>> fruit = Fruit.objects.create(name='Apple')
           >>> fruit.name = 'Pear'
           >>> fruit.save()
           >>> Fruit.objects.values_list('name', flat=True)
           <QuerySet ['Apple', 'Pear']>

 7. unique : If True, this field must be unique throughout the table.


# Automatic primary key fields:
-------------------------------
-> By default, Django gives each model the following field:
      id = models.AutoField(primary_key=True) # an auto-incrementing primary key.


# Verbose field names:
----------------------
-> Each field type, except for ForeignKey, ManyToManyField and OneToOneField, takes an optional first positional
   argument – a verbose name. If the verbose name isn’t given, Django will automatically create it using the
   field’s attribute name, converting underscores to spaces.

   Eg-1 :
   first_name = models.CharField("person's first name", max_length=30) # verbose name is "person's first name"

   Eg-2 :
   first_name = models.CharField(max_length=30)  # verbose name is "first name"

-> ForeignKey, ManyToManyField and OneToOneField require the first argument to be a model class,
   so use the verbose_name keyword argument:

   Eg:
    poll = models.ForeignKey(
        Poll,
        on_delete=models.CASCADE,
        verbose_name="the related poll",
    )
    sites = models.ManyToManyField(Site, verbose_name="list of sites")
    place = models.OneToOneField(
        Place,
        on_delete=models.CASCADE,
        verbose_name="related place",
    )



# Relationships: ****
----------------

  # Many-to-one relationships:
  ----------------------------
  -> To define a many-to-one relationship, use django.db.models.ForeignKey.
  -> ForeignKey requires a positional argument: the class to which the model is related.

     Eg: if a Car model has a Manufacturer – that is, a Manufacturer makes multiple cars but each Car only has
         one Manufacturer

         class Manufacturer(models.Model):
             # ...
             pass

         class Car(models.Model):
             manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)
             # ...

    Note: ForeignKey fields accept a number of extra arguments (optional). [refer docs]


  # Many-to-many relationships:
  -----------------------------
  -> "ManyToManyField" attribute used.
  -> ManyToManyField requires a positional argument: the class to which the model is related.

    Eg: If a Pizza has multiple Topping objects, ie; Topping can be on multiple pizzas and each Pizza has multiple toppings
    class Topping(models.Model):
        # ...
        pass

    class Pizza(models.Model):
        # ...
          toppings = models.ManyToManyField(Topping)

    Note:
    1. As with ForeignKey, you can also create recursive relationships (an object with a many-to-many relationship
       to itself) and relationships to models not yet defined.

    2. It doesn’t matter which model has the ManyToManyField, but you should only put it in one of the models
       – not both.

    3. Generally, ManyToManyField instances should go in the object that’s going to be edited on a form.
       The way it’s set up above, the Pizza form would let users select the toppings.


       # Extra fields on many-to-many relationships (optional):
       --------------------------------------------------------
       -> sometimes we may need to associate data with the relationship between two models.
       -> For these situations, Django allows you to specify the model that will be used to govern the many-to-many
          relationship. You can then put extra fields on the intermediate model. The intermediate model is associated
          with the ManyToManyField using the through argument to point to the model that will act as an intermediary.

          Eg:
          class Person(models.Model):
              name = models.CharField(max_length=128)

              def __str__(self):              # __unicode__ on Python 2
                  return self.name

          class Group(models.Model):
              name = models.CharField(max_length=128)
              members = models.ManyToManyField(Person, through='Membership')

              def __str__(self):              # __unicode__ on Python 2
                  return self.name

          class Membership(models.Model):
              person = models.ForeignKey(Person, on_delete=models.CASCADE)
              group = models.ForeignKey(Group, on_delete=models.CASCADE)
              date_joined = models.DateField()
              invite_reason = models.CharField(max_length=64)

        -> Few restrictions on the intermediate model:

           * Your intermediate model must contain one - and only one - foreign key to the source model (Group)
           * Your intermediate model must contain one - and only one - foreign key to the target model (Person)
           [https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.ManyToManyField.through_fields]

           * For a model which has a many-to-many relationship to itself through an intermediary model, two foreign
             keys to the same model are permitted, but they will be treated as the two (different) sides of the many-to-many
             relationship. If there are more than two foreign keys though, you must also specify through_fields as above,
             or a validation error will be raised.

           * When defining a many-to-many relationship from a model to itself, using an intermediary model,
             you must use symmetrical=False.

            Eg:
            >>> ringo = Person.objects.create(name="Ringo Starr")
            >>> paul = Person.objects.create(name="Paul McCartney")
            >>> beatles = Group.objects.create(name="The Beatles")
            >>> m1 = Membership(person=ringo, group=beatles,
            ...     date_joined=date(1962, 8, 16),
            ...     invite_reason="Needed a new drummer.")
            >>> m1.save()
            >>> beatles.members.all()
            <QuerySet [<Person: Ringo Starr>]>
            >>> ringo.group_set.all()
            <QuerySet [<Group: The Beatles>]>
            >>> m2 = Membership.objects.create(person=paul, group=beatles,
            ...     date_joined=date(1960, 8, 1),
            ...     invite_reason="Wanted to form a band.")
            >>> beatles.members.all()
            <QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>]>

          * Unlike normal many-to-many fields, you can’t use add(), create(), or set() to create relationships:

            Eg:
            >>> # The following statements will not work
            >>> beatles.members.add(john)
            >>> beatles.members.create(name="George Harrison")
            >>> beatles.members.set([john, paul, ringo, george])

            -> The only way to create this type of relationship is to create instances of the intermediate model.
            -> The remove() method is disabled for similar reasons.

            -> The clear() method can be used to remove all many-to-many relationships.

               Eg:
               >>> # Beatles have broken up
               >>> beatles.members.clear()
               >>> # Note that this deletes the intermediate model instances
               >>> Membership.objects.all()
               <QuerySet []>

    Eg-1: Find all the groups with a member whose name starts with 'Paul'
    >>> Group.objects.filter(members__name__startswith='Paul')
    <QuerySet [<Group: The Beatles>]>

    Eg-2: Find all the members of the Beatles that joined after 1 Jan 1961
    >>> Person.objects.filter(group__name='The Beatles', membership__date_joined__gt=date(1961,1,1))
    <QuerySet [<Person: Ringo Starr]>


  # One-to-one relationships :
  ----------------------------
  -> OneToOneField used.
  -> This is most useful on the primary key of an object when that object “extends” another object in some way.
  -> Model inheritance, involves an implicit one-to-one relation.
  -> We can have multiple fields of type OneToOneField on a single model.
  -> OneToOneField fields also accept an optional parent_link argument.

    Eg: [https://docs.djangoproject.com/en/1.11/topics/db/examples/one_to_one/]


  # Models across files:
  ----------------------
  Eg:
  from django.db import models
  from geography.models import ZipCode

  class Restaurant(models.Model):
      # ...
      zip_code = models.ForeignKey(ZipCode, on_delete=models.SET_NULL, blank=True, null=True,)


  # Field name restrictions:
  --------------------------
  -> can't use reserve words.
  -> can't use more than one underscore.

  # Meta options:
  ---------------
  [https://docs.djangoproject.com/en/1.11/ref/models/options/]
  Eg:
  class Ox(models.Model):
      horn_length = models.IntegerField()

      class Meta:
          ordering = ["horn_length"]
          verbose_name_plural = "oxen"

  -> Model metadata is “anything that’s not a field”, such as ordering options (ordering), database table name
     (db_table), or human-readable singular and plural names (verbose_name and verbose_name_plural).
     None are required, and adding class Meta to a model is completely optional.


  # Model attributes:
  -------------------
  -> The most important attribute of a model is the Manager. It’s the interface through which database query operations
     are provided to Django models and is used to retrieve the instances from the database. If no custom Manager is
     defined, the default name is objects. Managers are only accessible via model classes, not the model instances.

     Eg: Chaning the manager name [https://docs.djangoproject.com/en/1.11/topics/db/managers/#django.db.models.Manager]
     class Person(models.Model):
         #...
         people = models.Manager()

     >>> Person.objects       # generate an AttributeError exception,
     >>> Person.people.all()  # provide a list of all Person objects.


  # Model methods:
  ----------------
  -> Define custom methods on a model to add custom “row-level” functionality to your objects.

    Eg:
    class Person(models.Model):
        first_name = models.CharField(max_length=50)
        last_name = models.CharField(max_length=50)
        birth_date = models.DateField()

        def baby_boomer_status(self):
            "Returns the person's baby-boomer status."
            import datetime
            if self.birth_date < datetime.date(1945, 8, 1):
                return "Pre-boomer"
            elif self.birth_date < datetime.date(1965, 1, 1):
                return "Baby boomer"
            else:
                return "Post-boomer"

        @property
        def full_name(self):
            "Returns the person's full name."
            return '%s %s' % (self.first_name, self.last_name)

  -> __str__()          :  String representation of object.
  -> get_absolute_url() : This tells Django how to calculate the URL for an object.


  # Overriding predefined model methods:
  --------------------------------------
  -> There’s another set of model methods that encapsulate a bunch of database behavior that you’ll want to customize.
     In particular you’ll often want to change the way save() and delete() work.

     Eg:
     class Blog(models.Model):
         name = models.CharField(max_length=100)
         tagline = models.TextField()

         def save(self, *args, **kwargs):
             if self.name == "Yoko Ono's blog":
                 return # Yoko shall never have her own blog!
             else:
                 super(Blog, self).save(*args, **kwargs) # Call the "real" save() method.



  # Executing custom SQL : [https://docs.djangoproject.com/en/1.11/topics/db/sql/]

  # Model inheritance :
  ---------------------
  -> The only decision you have to make is whether you want the parent models to be models in their own right
    (with their own database tables), or if the parents are just holders of common information that will only be
    visible through the child models.

    Three styles of inheritance :
    1. Often, you will just want to use the parent class to hold information that you don’t want to have to type out
       for each child model. This class isn’t going to ever be used in isolation, so Abstract base classes are what
       you’re after.
       [https://docs.djangoproject.com/en/1.11/topics/db/models/#abstract-base-classes]

    2. If you’re subclassing an existing model (perhaps something from another application entirely) and want each
       model to have its own database table, Multi-table inheritance is the way to go.
       All of the fields of parent class will also be available in child class (via an automatically-created OneToOneField)
       [https://docs.djangoproject.com/en/1.11/topics/db/models/#multi-table-inheritance]

    3. Finally, if you only want to modify the Python-level behavior of a model, without changing the models fields
       in any way, you can use Proxy models.
       [https://docs.djangoproject.com/en/1.11/topics/db/models/#proxy-models]


       1. Abstract base classes:
       ------------------------
       Eg:
       class CommonInfo(models.Model):
           name = models.CharField(max_length=100)
           age = models.PositiveIntegerField()

           class Meta:
               abstract = True

       class Student(CommonInfo):
           home_group = models.CharField(max_length=5)

       -> The Student model will have three fields: name, age and home_group.


          # Meta inheritance:
          -------------------
          -> If a child class does not declare its own Meta class, it will inherit the parent’s Meta [but will set abstract=False in child class].
             If the child wants to extend the parent’s Meta class, it can subclass it.

             Eg:
             class CommonInfo(models.Model):
                 # ...
                 class Meta:
                     abstract = True
                     ordering = ['name']

             class Student(CommonInfo):
                 # ...
                 class Meta(CommonInfo.Meta):
                     db_table = 'student_info'

          Note: We can also make abstract base class that inherits from another abstract base class.
                We just need to remember to explicitly set abstract=True each time.


          # Be careful with related_name and related_query_name:
          ------------------------------------------------------
          -> If you are using related_name or related_query_name on a ForeignKey or ManyToManyField, you must always specify a
             unique reverse name and query name for the field. [ since the fields on this class are included into each of the child classes]

          -> Use these : '%(app_label)s' and '%(class)s'
            * '%(class)s' is replaced by the lower-cased name of the child class that the field is used in.
            * '%(app_label)s' is replaced by the lower-cased name of the app the child class is contained within.

            Eg:
            class Base(models.Model):
                m2m = models.ManyToManyField(
                    OtherModel,
                    related_name="%(app_label)s_%(class)s_related",
                    related_query_name="%(app_label)s_%(class)ss",
                )

                class Meta:
                    abstract = True

            class ChildA(Base):
                pass

            class ChildB(Base):
                pass

            -> If you don’t specify a related_name attribute for a field in an abstract base class, the default reverse name
               will be the name of the child class followed by '_set', just as it normally would be if you’d declared the
               field directly on the child class. For example, in the above code, if the related_name attribute was omitted,
               the reverse name for the m2m field would be childa_set in the ChildA case and childb_set for the ChildB field.


      2. Multi-table inheritance:
      ---------------------------
      -> The inheritance relationship introduces links between the child model and each of its parents
         (via an automatically-created OneToOneField).
      Eg:
      class Place(models.Model):
          name = models.CharField(max_length=50)
          address = models.CharField(max_length=80)

      class Restaurant(Place):
          serves_hot_dogs = models.BooleanField(default=False)
          serves_pizza = models.BooleanField(default=False)

      -> All of the fields of Place will also be available in Restaurant, although the data will reside in a different database table.

      >>> Place.objects.filter(name="Bob's Cafe")
      >>> Restaurant.objects.filter(name="Bob's Cafe")


      -> If you have a Place that is also a Restaurant (one-to-one relation), you can get from the Place object to the Restaurant object
         by using the lower-case version of the model name:
          Eg:
          >>> p = Place.objects.get(id=12)
          # If p is a Restaurant object, this will give the child class:
          >>> p.restaurant
          <Restaurant: ...>

      -> The automatically-created OneToOneField on Restaurant that links it to Place looks like this:

          place_ptr = models.OneToOneField(
              Place, on_delete=models.CASCADE,
              parent_link=True,
          )

          Note : We can override that field by declaring our own OneToOneField with parent_link=True on Restaurant.


        # Meta and multi-table inheritance :
        ------------------------------------
        -> In this case a child model does not have access to its parent’s Meta class. However, there are a few limited cases where
           the child inherits behavior from the parent: if the child does not specify an ordering attribute or a get_latest_by
           attribute, it will inherit these from its parent.

        -> If the parent has an ordering and you don’t want the child to have any natural ordering, you can explicitly disable it:

          Eg:
          class ChildModel(ParentModel):
              # ...
              class Meta:
                  # Remove parent's ordering effect
                  ordering = []


        # Inheritance and reverse relations :
        -------------------------------------
        -> If we specify a custom field to define relation with parent model ie; ForeignKey or ManyToManyField
           we must provide related_name attribute on each such field otherwise django will raise a validation error.
           [Refer docs for more info]


      3. Proxy models :
      -----------------
      ->












------------------------------------------------------The End----------------------------------------------------------
